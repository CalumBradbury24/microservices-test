# Creates a kubernetes deployment

apiVersion: apps/v1
kind: Deployment # The type of object we want to create
metadata: # config options for this deployment
  name: event-bus-depl # Name of deployment
spec:
  replicas: 1 # Number of pods we want to create running this image
  selector:
    matchLabels:
      app: event-bus
  template:
    metadata:
      labels:
        app: event-bus
    spec:
      containers:
        - name: event-bus # Generate a container in the pod with a name of 'event-bus'
          image: calumbradbury/event-bus:latest # The exact docker image we want to use
          imagePullPolicy: Never

# Useful kubernetes deployment related commands
# kubectl get deployments - list running deployments
# kubectl describe deployment [deployment_name] - Print out some information about the running deployment
# kubectl apply -f event-bus-depl.yaml - Build deployment
# kubectl delete deployment event-bus-depl.yaml - Delete a deployment
# kubectl rollout restart deployment event-bus-depl - Restart deployment after changes that results in docker image change

# When updating code
# - Make change to project code
# - Rebuild docker image with new verion number (0.0.2 etc)
# - Update image version in this file (unless using latest)
# - Rebuild this file

--- # Allows creating multiple objects in a .yml file
apiVersion: v1
kind: Service # The type of object we want to create
metadata: # config options for this service
  name: event-bus-srv # Name of service
spec:
  type: NodePort # type of service we are trying to create (The purpose of a NodePort is to expose a set of pods to the outside world)
  selector:
    app: event-bus # Tell the service to direct any incoming traffic to the pod with the label "event-bus"
  ports: # All the ports that are exposed on the target pod (event-bus runs on port 4000)
    - name: event-bus
      protocol: TCP
      port: 4005
      targetPort: 4005


# nodePort - Makes the service visible outside the Kubernetes cluster by the node’s IP address and the port number declared in this property. The service also has to be of type NodePort (if this field isn’t specified, Kubernetes will allocate a node port automatically).
# port - Expose the service on the specified port internally within the cluster. That is, the service becomes visible on this port, and will send requests made to this port to the pods selected by the service.


#git pull
#build the event-bus and posts deployments again kubectl apply -f event-bus-depl.yaml etc